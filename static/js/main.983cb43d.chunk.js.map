{"version":3,"sources":["serviceWorker.ts","services/Transport.ts","hooks/useAuth.ts","components/Header.tsx","components/SeparatePost.tsx","hooks/usePosts.ts","hooks/useUsers.ts","pages/Main.tsx","components/SeparateComment.tsx","components/PostComments.tsx","components/Layout.tsx","hooks/usePost.ts","hooks/useUser.ts","hooks/useComments.ts","pages/Post.tsx","components/PostsTable.tsx","components/AlbumsTable.tsx","components/ToDosTable.tsx","pages/Profile.tsx","hooks/usePhotos.ts","pages/Album.tsx","pages/Photo.tsx","pages/CreatePost.tsx","pages/EditPost.tsx","pages/Create.tsx","pages/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","transport","client","axios","create","handlers","serverUrl","this","baseURL","handler","push","url","params","Promise","resolve","reject","get","then","response","data","catch","error","forEach","body","put","post","delete","useAuth","context","useContext","AppContext","onLogin","email","password","onLogout","setAuth","setUser","undefined","localStorage","removeItem","onRegister","path","useStyles","makeStyles","theme","menuButton","marginRight","spacing","title","flexGrow","textDecoration","color","fontSize","logoutButton","userBox","display","alignItems","Header","classes","auth","AppBar","position","Toolbar","to","className","Button","variant","onClick","Typography","user","styles","card","padding","gridTemplateColumns","gridRowGap","width","boxSizing","link","text","overflow","textOverflow","content","buttons","button","SeparatePost","props","userId","useState","useEffect","users","Card","id","CardHeader","subheader","name","CardContent","IconButton","aria-label","onDeletePost","onEditPost","usePosts","posts","setPosts","getPosts","createPost","editPost","postId","deletePost","useUsers","setUsers","userPosts","setUserPosts","userAlbums","setUserAlbums","userToDos","setUserToDos","getUsers","getUserPosts","getUserAlbums","getUserToDos","container","marginTop","Main","history","useHistory","map","item","key","SeparateComment","comment","PostComments","comments","justifyItems","paddingTop","paddingBottom","Layout","classNames","children","usePost","setPost","useUser","useComments","postComments","setPostComments","Post","useParams","align","paragraph","tableContainer","postName","PostsTable","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","AlbumsTable","albums","album","ToDosTable","toDos","toDo","completed","CheckBoxOutlined","CheckBoxOutlineBlankOutlined","Profile","username","address","city","street","suite","company","phone","website","usePhotos","photos","setPhotos","photo","setPhoto","getPhotos","albumId","getPhoto","photoId","photoContainer","textAlign","Album","src","thumbnailUrl","Photo","CreatePost","setTitle","setBody","postSuccess","setPostSuccess","postError","setPostError","curPosts","component","TextField","required","label","fullWidth","autoFocus","value","onChange","e","target","inputProps","maxLength","multiline","rows","min","max","Math","floor","random","length","Alert","severity","EditPost","height","top","left","transform","success","login","root","marginLeft","Create","setName","setUsername","setEmail","setPassword","repeatPassword","setRepeatPassword","setSuccess","setError","type","register","Login","setItem","JSON","stringify","resp","message","init","createContext","App","localUser","getItem","parse","Provider","exact","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.983cb43d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. app is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosInstance, AxiosResponse } from \"axios\";\r\n\r\nexport class HttpTransport {\r\n    private client: AxiosInstance = axios.create();\r\n    private readonly handlers: Array<(error?: Error) => void> = [];\r\n\r\n    public init(serverUrl: string): void {\r\n        this.client = axios.create({\r\n            baseURL: serverUrl,\r\n        });\r\n    }\r\n\r\n    public subscribe(handler: (error?: Error) => void): void {\r\n        this.handlers.push(handler);\r\n    }\r\n\r\n    public get<R extends object>(url: string, params?: object): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .get(url, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    public put<R extends object, B extends object>(\r\n        url: string,\r\n        body: B,\r\n        params?: object,\r\n    ): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .put(url, { ...body }, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    public post<R extends object, B extends object>(\r\n        url: string,\r\n        body: B,\r\n        params?: object,\r\n    ): Promise<R> {\r\n        return new Promise<R>((resolve, reject) => {\r\n            this.client\r\n                .post(url, { ...body }, { params })\r\n                .then((response: AxiosResponse<R>) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n\r\n    async delete<Response = void>(url: string, params?: object): Promise<Response> {\r\n        return new Promise<Response>((resolve, reject) => {\r\n            this.client\r\n                .delete(url, { params })\r\n                .then((response) => {\r\n                    return resolve(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    reject(error);\r\n                    this.handlers.forEach((handler) => handler(error));\r\n                });\r\n        });\r\n    }\r\n}\r\n\r\nexport const transport = new HttpTransport();\r\n","import { transport } from \"../services/Transport\";\r\nimport { useContext } from \"react\";\r\nimport { AppContext } from \"../app/App\";\r\n\r\ninterface IAuth {\r\n    onLogin: (email: string, password: string) => Promise<any>;\r\n\r\n    onLogout: () => void;\r\n\r\n    onRegister: (\r\n        path: string,\r\n        body: { name: string; username: string; email: string; password: string },\r\n    ) => Promise<object>;\r\n}\r\n\r\nexport const useAuth = (): IAuth => {\r\n    const context = useContext(AppContext);\r\n\r\n    const onLogin = (email: string, password: string) => {\r\n        return transport.post<any, { email: string; password: string }>(\"/login\", {\r\n            email,\r\n            password,\r\n        });\r\n    };\r\n\r\n    const onLogout = () => {\r\n        context.setAuth(false);\r\n        context.setUser(undefined);\r\n        localStorage.removeItem(\"user\");\r\n    };\r\n\r\n    const onRegister = (\r\n        path: string,\r\n        body: { name: string; username: string; email: string; password: string },\r\n    ) => {\r\n        return transport.post(\"/users\", body);\r\n    };\r\n\r\n    return { onLogin, onLogout, onRegister };\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppBar, Button, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        fontSize: \"40px\",\r\n    },\r\n    logoutButton: {\r\n        marginRight: 20,\r\n    },\r\n    userBox: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n    }\r\n}));\r\n\r\nexport const Header = () => {\r\n    const classes = useStyles();\r\n    const context = useContext(AppContext);\r\n    const auth = useAuth();\r\n\r\n    const onLogout = () => {\r\n        auth.onLogout()\r\n    }\r\n\r\n    return (\r\n        <AppBar position=\"fixed\">\r\n            <Toolbar>\r\n                <Link to={`/`} className={classes.title}>\r\n                    Site\r\n                </Link>\r\n                {context.auth && (\r\n                    <div className={classes.userBox}>\r\n                        <Button variant=\"contained\" className={classes.logoutButton} onClick={onLogout}>\r\n                            Logout\r\n                        </Button>\r\n                        <Typography>{context.user?.email}</Typography>\r\n                    </div>\r\n                )}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { IPost } from \"../entity/posts\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IUser } from \"../entity/user\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\ninterface IProps {\r\n    post: IPost;\r\n    users: IUser[];\r\n\r\n    onDeletePost?(postId: string | number): void;\r\n\r\n    onEditPost?(postId: string | number): void;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n        display: \"grid\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    },\r\n    buttons: {\r\n        display: \"flex\",\r\n    },\r\n    button: {\r\n        alignItems: \"flex-start\",\r\n        marginRight: 10,\r\n    },\r\n}));\r\n\r\nexport const SeparatePost = (props: IProps) => {\r\n    const classes = styles();\r\n    const post = props.post;\r\n    const userId = post.userId;\r\n    const [user, setUser] = useState<IUser>();\r\n\r\n    useEffect(() => {\r\n        setUser(props.users[userId - 1]);\r\n    }, [props.users]);\r\n\r\n    const del = () => {\r\n        if (props.onDeletePost) {\r\n            props.onDeletePost(post.id);\r\n        }\r\n    };\r\n\r\n    const edit = () => {\r\n        if (props.onEditPost) {\r\n            props.onEditPost(post.id);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <Link to={`/posts/${post.id}`} className={classes.link}>\r\n                <CardHeader title={post.title} subheader={user?.name} />\r\n                <CardContent className={classes.content}>\r\n                    <Typography className={classes.text}>{post.body}</Typography>\r\n                </CardContent>\r\n            </Link>\r\n            <div className={classes.buttons}>\r\n                <IconButton aria-label=\"delete\" onClick={del} className={classes.button}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n                <IconButton aria-label=\"delete\" onClick={edit} className={classes.button}>\r\n                    <EditIcon />\r\n                </IconButton>\r\n            </div>\r\n        </Card>\r\n    );\r\n};\r\n","import { IPost } from \"../entity/posts\";\r\nimport { useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\ntype TEditPost = Pick<IPost, \"title\" | \"body\">\r\n\r\ninterface IUsePosts {\r\n    posts: IPost[];\r\n\r\n    getPosts(): Promise<void>;\r\n\r\n    createPost(data: Omit<IPost, \"id\">): Promise<object>;\r\n\r\n    editPost(postId: number | string, data: TEditPost): Promise<object>;\r\n\r\n    deletePost(postId: number | string): Promise<void>;\r\n}\r\n\r\nexport function usePosts(): IUsePosts {\r\n    const [posts, setPosts] = useState<IPost[]>([]);\r\n\r\n    const getPosts = () => {\r\n        return transport.get<IPost[]>(\"/posts\").then(setPosts)\r\n    }\r\n\r\n    const createPost = (data: IPost) => {\r\n        return transport.post(`/posts`, data)\r\n    }\r\n\r\n    const editPost = (postId: number | string, data: TEditPost ) => {\r\n        return transport.put(`/posts/${postId}`, data)\r\n    }\r\n\r\n    const deletePost = (postId: number | string) => {\r\n        return transport.delete(`posts/${postId}`).then(getPosts)\r\n    }\r\n\r\n    return { posts, getPosts, createPost, editPost, deletePost }\r\n}","import { IToDo, IUser } from \"../entity/user\";\r\nimport { useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\nimport { IPost } from \"../entity/posts\";\r\nimport { IAlbum } from \"../entity/album\";\r\n\r\ninterface IUseUsers {\r\n    users: IUser[];\r\n    userPosts: IPost[];\r\n    userAlbums: IAlbum[];\r\n    userToDos: IToDo[];\r\n\r\n    getUsers(): Promise<void>;\r\n\r\n    getUserPosts(userId: string): Promise<void>;\r\n\r\n    getUserAlbums(userId: string): Promise<void>;\r\n\r\n    getUserToDos(userId: string): Promise<void>;\r\n}\r\n\r\nexport function useUsers(): IUseUsers {\r\n    const [users, setUsers] = useState<IUser[]>([]);\r\n    const [userPosts, setUserPosts] = useState<IPost[]>([]);\r\n    const [userAlbums, setUserAlbums] = useState<IAlbum[]>([])\r\n    const [userToDos, setUserToDos] = useState<IToDo[]>([])\r\n\r\n    const getUsers = () => {\r\n        return transport.get<IUser[]>(`users`).then(setUsers)\r\n    }\r\n\r\n    const getUserPosts = (userId: string) => {\r\n        return transport.get<IPost[]>(`users/${userId}/posts`).then(setUserPosts)\r\n    }\r\n\r\n    const getUserAlbums = (userId: string) => {\r\n        return transport.get<IAlbum[]>(`users/${userId}/albums`).then(setUserAlbums);\r\n    }\r\n\r\n    const getUserToDos = (userId: string) => {\r\n        return transport.get<IToDo[]>(`users/${userId}/todos`).then(setUserToDos)\r\n    }\r\n\r\n    return  {users, userPosts, userAlbums, userToDos, getUsers, getUserPosts, getUserAlbums, getUserToDos}\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { transport } from \"../services/Transport\";\r\nimport { IPost } from \"../entity/posts\";\r\nimport { SeparatePost } from \"../components/SeparatePost\";\r\nimport { IUser } from \"../entity/user\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { usePost } from \"../hooks/usePost\";\r\nimport { usePosts } from \"../hooks/usePosts\";\r\nimport { useUsers } from \"../hooks/useUsers\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        position: \"relative\",\r\n        marginTop: 80,\r\n        padding: 50,\r\n    },\r\n    posts: {\r\n        display: \"grid\",\r\n        gridRowGap: 40,\r\n    },\r\n}));\r\n\r\nexport const Main = () => {\r\n    const classes = styles();\r\n    const history = useHistory();\r\n    const { posts, getPosts, deletePost } = usePosts();\r\n    const { users, getUsers } = useUsers();\r\n\r\n    useEffect(() => {\r\n        getPosts();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getUsers();\r\n    }, []);\r\n\r\n    const onCreatePost = () => {\r\n        history.push(`/createPost`);\r\n    };\r\n\r\n    const onDeletePost = (postId: string | number) => {\r\n        deletePost(postId)\r\n    };\r\n\r\n    const onEditPost = (postId: number | string) => {\r\n        history.push(`/editPost/${postId}`);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={onCreatePost}>\r\n                Create a post\r\n            </Button>\r\n            <div className={classes.posts}>\r\n                {posts.map((item) => (\r\n                    <SeparatePost\r\n                        post={item}\r\n                        key={item.id}\r\n                        users={users}\r\n                        onDeletePost={onDeletePost}\r\n                        onEditPost={onEditPost}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {IComment} from \"../entity/posts\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, CardContent, CardHeader, Typography} from \"@material-ui/core\";\r\nimport {IUser} from \"../entity/user\";\r\n\r\ninterface IProps {\r\n    comment?: IComment;\r\n\r\n    users?: IUser[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n        marginTop: 15,\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    }\r\n}));\r\n\r\nexport const SeparateComment = (props: IProps) => {\r\n    const classes = styles();\r\n    const { comment } = props;\r\n\r\n    return (\r\n            <Card className={classes.card} variant={\"outlined\"}>\r\n                <CardHeader\r\n                    title={comment?.name}\r\n                />\r\n                <CardContent className={classes.content}>\r\n                    <Typography className={classes.text}>{comment?.body}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {IComment} from \"../entity/posts\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Card, Typography} from \"@material-ui/core\";\r\nimport {SeparateComment} from \"./SeparateComment\";\r\nimport {IUser} from \"../entity/user\";\r\n\r\ninterface IProps {\r\n    comments: IComment[];\r\n    users?: IUser[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n        padding: 15,\r\n        boxSizing: \"border-box\",\r\n    },\r\n}));\r\n\r\nexport const PostComments = (props: IProps) => {\r\n    const classes = styles();\r\n    const { users, comments } = props;\r\n\r\n    return (\r\n        <Card className={classes.card} variant={\"outlined\"}>\r\n            <Typography variant={\"h4\"}>Comments:</Typography>\r\n            <div>\r\n                {comments.map((item: IComment) => {\r\n                    return <SeparateComment key={item.id} comment={item} users={users}/>\r\n                })}\r\n            </div>\r\n        </Card>\r\n    )\r\n}","import React, { FC } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface IProps {\r\n    className?: string;\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        marginTop: \"64px\",\r\n        position: \"relative\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        justifyItems: \"center\",\r\n        padding: 50,\r\n        paddingTop: \"50px\",\r\n        paddingBottom: \"50px\",\r\n        alignItems: \"flex-start\",\r\n        gridRowGap: 20,\r\n    },\r\n}));\r\n\r\nexport const Layout: FC<IProps> = (props) => {\r\n    const classes = styles();\r\n\r\n    return <div className={classNames(classes.container, props.className)}>{props.children}</div>;\r\n};","import { IPost } from \"../entity/posts\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\nexport function usePost(postId?: string): {\r\n    post: IPost | undefined;\r\n} {\r\n    const [post, setPost] = useState<IPost>();\r\n\r\n    const getPost = () => {\r\n        if (postId) {\r\n            transport.get<IPost>(`posts/${postId}`).then(setPost);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPost();\r\n    }, [postId]);\r\n\r\n    return { post };\r\n}\r\n","import { IUser } from \"../entity/user\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\nexport function useUser(userId: number | undefined): {\r\n    user: IUser | undefined\r\n} {\r\n    const [user, setUser] = useState<IUser>()\r\n\r\n    const getUser = () => {\r\n        if (userId) {\r\n            transport.get<IUser>(`users/${userId}`).then(setUser)\r\n        }\r\n    }\r\n\r\n    useEffect(() =>{\r\n        getUser()\r\n    }, [userId])\r\n\r\n    return {user}\r\n}","import { IComment } from \"../entity/posts\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\ninterface IUseComments {\r\n    postComments: IComment[];\r\n}\r\n\r\nexport function useComments(postId: string): IUseComments  {\r\n    const [postComments, setPostComments] = useState<IComment[]>([])\r\n\r\n    const getPostComments = () => {\r\n        if (postId) {\r\n            transport.get<IComment[]>(`posts/${postId}/comments`).then(setPostComments);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPostComments()\r\n    }, [postId])\r\n\r\n    return {postComments}\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useParams} from \"react-router\";\r\nimport {Card, Typography} from \"@material-ui/core\";\r\nimport {PostComments} from \"../components/PostComments\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { usePost } from \"../hooks/usePost\";\r\nimport { useUsers } from \"../hooks/useUsers\";\r\nimport { useUser } from \"../hooks/useUser\";\r\nimport { useComments } from \"../hooks/useComments\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        width: \"100%\",\r\n        padding: 15,\r\n        boxSizing: \"border-box\",\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    link: {\r\n        textDecoration: \"none\",\r\n        display: \"grid\",\r\n    },\r\n}));\r\n\r\nexport const Post = () => {\r\n    const classes = styles();\r\n    const { postId } = useParams();\r\n    const {users, getUsers} = useUsers();\r\n    const {post} = usePost(postId);\r\n    const {user} = useUser(post?.userId);\r\n    const {postComments} = useComments(postId);\r\n\r\n    useEffect(() => {\r\n        getUsers()\r\n    }, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <Link to={`/users/${user?.id}`} className={classes.link}>\r\n                <Card className={classes.card} variant={\"outlined\"}>\r\n                    <Typography variant=\"h4\" align={\"center\"}>\r\n                        {user?.name}\r\n                    </Typography>\r\n                </Card>\r\n            </Link>\r\n            <Card className={classes.card} variant={\"outlined\"}>\r\n                <Typography variant=\"h4\" align={\"center\"}>\r\n                    {post?.title}\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph={true} className={classes.text}>\r\n                    {post?.body}\r\n                </Typography>\r\n            </Card>\r\n            <PostComments comments={postComments} users={users}/>\r\n        </Layout>\r\n    )\r\n}","import React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {IPost} from \"../entity/posts\";\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n    posts?: IPost[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nexport const PostsTable = (props: IProps) => {\r\n    const classes = styles();\r\n    const { posts = [] } = props;\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Posts</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {posts?.map((post) => (\r\n                        <TableRow key={post.id}>\r\n                            <TableCell align=\"center\" className={classes.postName}>\r\n                                <Link to={`/posts/${post.id}`}>{post.title}</Link>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import React from \"react\";\r\nimport {IAlbum} from \"../entity/album\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\ninterface IProps {\r\n    albums?: IAlbum[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nexport const AlbumsTable = (props: IProps) => {\r\n    const classes = styles();\r\n    const albums = props.albums;\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Albums</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {albums?.map((album) => (\r\n                        <TableRow key={album.id}>\r\n                            <TableCell align=\"center\" className={classes.postName}>\r\n                                <Link to={`/albums/${album.id}`}>{album.title}</Link>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import React from \"react\";\r\nimport {IToDo} from \"../entity/user\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography} from \"@material-ui/core\";\r\nimport { CheckBoxOutlineBlankOutlined, CheckBoxOutlined } from \"@material-ui/icons\";\r\n\r\ninterface IProps {\r\n    toDos?: IToDo[];\r\n}\r\n\r\nconst styles = makeStyles(() => ({\r\n    tableContainer: {\r\n        marginTop: 10,\r\n    },\r\n    postName: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nexport const ToDosTable = (props: IProps) => {\r\n    const classes = styles();\r\n    const { toDos = [] } = props;\r\n\r\n    return (\r\n        <TableContainer className={classes.tableContainer}>\r\n            <Table>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">To Do's</TableCell>\r\n                        <TableCell align=\"center\">Complete?</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {toDos?.map((toDo) => (\r\n                        <TableRow key={toDo.id}>\r\n                            <TableCell align=\"center\" className={classes.postName}>\r\n                                <Typography>{toDo.title}</Typography>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">\r\n                                {toDo.completed === true ? <CheckBoxOutlined /> : <CheckBoxOutlineBlankOutlined />}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useParams } from \"react-router\";\r\nimport { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\nimport { PostsTable } from \"../components/PostsTable\";\r\nimport { AlbumsTable } from \"../components/AlbumsTable\";\r\nimport { ToDosTable } from \"../components/ToDosTable\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { useUser } from \"../hooks/useUser\";\r\nimport { useUsers } from \"../hooks/useUsers\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    card: {\r\n        padding: 20,\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n        width: \"100%\",\r\n        boxSizing: \"border-box\",\r\n        marginTop: 15,\r\n    },\r\n    text: {\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\",\r\n    },\r\n    content: {\r\n        overflow: \"hidden\",\r\n    },\r\n}));\r\n\r\nexport const Profile = () => {\r\n    const classes = styles();\r\n    const { userId } = useParams();\r\n    const {user} = useUser(userId);\r\n    const {userPosts, getUserPosts, userAlbums, getUserAlbums, userToDos, getUserToDos} = useUsers();\r\n\r\n    useEffect(() => {\r\n        getUserPosts(userId);\r\n        getUserAlbums(userId);\r\n        getUserToDos(userId)\r\n    }, [user]);\r\n\r\n    return (\r\n        <Layout>\r\n            <Card className={classes.card} variant={\"outlined\"}>\r\n                <CardHeader title={user?.username} />\r\n                <CardHeader title=\"User information:\" />\r\n                <CardContent className={classes.content}>\r\n                    <Typography className={classes.text}>Name:{user?.name}</Typography>\r\n                    <Typography className={classes.text}>City: {user?.address.city}</Typography>\r\n                    <Typography className={classes.text}>\r\n                        Address: {user?.address.street} {user?.address.suite}\r\n                    </Typography>\r\n                    <Typography className={classes.text}>Company: {user?.company.name}</Typography>\r\n                    <Typography className={classes.text}>Email: {user?.email}</Typography>\r\n                    <Typography className={classes.text}>Phone number: {user?.phone}</Typography>\r\n                    <Typography className={classes.text}>Website: {user?.website}</Typography>\r\n                </CardContent>\r\n            </Card>\r\n            <PostsTable posts={userPosts} />\r\n            <AlbumsTable albums={userAlbums} />\r\n            <ToDosTable toDos={userToDos} />\r\n        </Layout>\r\n    );\r\n};\r\n","import { IPhoto } from \"../entity/album\";\r\nimport { useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\n\r\ninterface IUsePhotos {\r\n    photos: IPhoto[];\r\n    photo: IPhoto | undefined;\r\n\r\n    getPhotos(albumId: string): Promise<void>;\r\n\r\n    getPhoto(photoId: string): Promise<void>;\r\n}\r\n\r\nexport function usePhotos(): IUsePhotos {\r\n    const [photos, setPhotos] = useState<IPhoto[]>([]);\r\n    const [photo, setPhoto] = useState<IPhoto>()\r\n\r\n    const getPhotos = (albumId: string) => {\r\n        return transport.get<IPhoto[]>(`albums/${albumId}/photos`).then(setPhotos)\r\n    }\r\n\r\n    const getPhoto = (photoId: string) => {\r\n        return transport.get<IPhoto>(`photos/${photoId}`).then(setPhoto)\r\n    }\r\n\r\n    return {photos, photo, getPhotos, getPhoto}\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {useParams} from \"react-router\";\r\nimport {transport} from \"../services/Transport\";\r\nimport {IPhoto} from \"../entity/album\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { usePhotos } from \"../hooks/usePhotos\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        gridTemplateColumns: \"1fr 1fr 1fr 1fr\"\r\n    },\r\n    photoContainer: {\r\n        width: \"50%\",\r\n        textAlign: \"center\",\r\n    }\r\n}));\r\n\r\nexport const Album = () => {\r\n    const { albumId } = useParams();\r\n    const classes = styles();\r\n    const {photos, getPhotos} = usePhotos();\r\n\r\n    useEffect(() => {\r\n        getPhotos(albumId);\r\n    }, [])\r\n\r\n    return (\r\n        <Layout className={classes.container}>\r\n            {photos?.map((photo:IPhoto) => (\r\n                <Link to={`/albums/${photo.albumId}/${photo.id}`} key={photo.id} className={classes.photoContainer}>\r\n                    <img src={photo.thumbnailUrl} />\r\n                    <Typography>{photo.title}</Typography>\r\n                </Link>\r\n            ))}\r\n        </Layout>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport {useParams} from \"react-router\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { usePhotos } from \"../hooks/usePhotos\";\r\n\r\nexport const Photo = () => {\r\n    const { photoId } = useParams();\r\n    const {photo, getPhoto} = usePhotos();\r\n\r\n    useEffect(() => {\r\n        getPhoto(photoId);\r\n    }, [])\r\n\r\n    return (\r\n        <Layout>\r\n            <img src={photo?.url} />\r\n        </Layout>\r\n    )\r\n}","import React, { useState } from \"react\";\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { usePosts } from \"../hooks/usePosts\";\r\n\r\nexport const CreatePost = () => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [body, setBody] = useState(\"\");\r\n    const [postSuccess, setPostSuccess] = useState(false);\r\n    const [postError, setPostError] = useState<string | undefined>(undefined);\r\n    const curPosts  = usePosts()\r\n    const inputProps = {\r\n        maxLength: 40,\r\n    };\r\n\r\n    function randomInt(min: number, max: number) {\r\n        return min + Math.floor((max - min) * Math.random());\r\n    }\r\n\r\n    const createPost = () => {\r\n        const userId = randomInt(1, 11);\r\n        const data = {\r\n            title,\r\n            body,\r\n            userId,\r\n        };\r\n        if (title.length > 0 && title.length > 0) {\r\n            curPosts.createPost(data).then(() => {\r\n                setTitle(\"\");\r\n                setBody(\"\");\r\n                setPostSuccess(true);\r\n            });\r\n        } else {\r\n            setPostError(\"You have to write tittle and text!\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <Typography variant=\"h3\" component=\"h1\">\r\n                Write your own post!\r\n            </Typography>\r\n            <TextField\r\n                required\r\n                label=\"Article title\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                autoFocus={true}\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                inputProps={inputProps}\r\n            />\r\n            <TextField\r\n                required\r\n                label=\"Article body\"\r\n                multiline\r\n                rows={14}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={body}\r\n                onChange={(e) => setBody(e.target.value)}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth onClick={createPost}>\r\n                Upload\r\n            </Button>\r\n            {postSuccess && <Alert severity=\"success\">Your post has been added!</Alert>}\r\n            {postError && <Alert severity=\"error\">{postError}</Alert>}\r\n        </Layout>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Button, TextField, Typography } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { Layout } from \"../components/Layout\";\r\nimport { usePosts } from \"../hooks/usePosts\";\r\nimport { usePost } from \"../hooks/usePost\";\r\n\r\nexport const EditPost = () => {\r\n    const [title, setTitle] = useState<string | undefined>(usePost().post?.title);\r\n    const [body, setBody] = useState<string | undefined>(usePost().post?.body);\r\n    const [postSuccess, setPostSuccess] = useState(false);\r\n    const [postError, setPostError] = useState<string | undefined>(undefined);\r\n    const { postId } = useParams();\r\n    const posts = usePosts();\r\n    const inputProps = {\r\n        maxLength: 40,\r\n    };\r\n\r\n    const editPost = () => {\r\n        if (title && body) {\r\n            const data = {\r\n                title,\r\n                body,\r\n            };\r\n            if (title.length > 0 && body.length > 0) {\r\n                posts.editPost(`/posts/${postId}`, data).then(() => {\r\n                    setTitle(\"\");\r\n                    setBody(\"\");\r\n                    setPostSuccess(true);\r\n                });\r\n            } else {\r\n                setPostError(\"You have to write tittle and text!\");\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <Typography variant=\"h3\" component=\"h1\">\r\n                Edit the post\r\n            </Typography>\r\n            <TextField\r\n                required\r\n                label=\"Article title\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                autoFocus={true}\r\n                value={title}\r\n                onChange={(e) => setTitle(e.target.value)}\r\n                inputProps={inputProps}\r\n            />\r\n            <TextField\r\n                required\r\n                label=\"Article body\"\r\n                multiline\r\n                rows={14}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={body}\r\n                onChange={(e) => setBody(e.target.value)}\r\n            />\r\n            <Button variant=\"contained\" color=\"primary\" fullWidth onClick={editPost}>\r\n                Edit\r\n            </Button>\r\n            {postSuccess && <Alert severity=\"success\">Your post has been edited!</Alert>}\r\n            {postError && <Alert severity=\"error\">{postError}</Alert>}\r\n        </Layout>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { transport } from \"../services/Transport\";\r\nimport { AxiosError } from \"axios\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        height: \"100vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: 600,\r\n        transform: \"translate(-50%, -50%)\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n    },\r\n    success: {\r\n        color: \"green\",\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n    },\r\n    login: {\r\n        textDecoration: \"none\",\r\n    },\r\n    root: {\r\n        marginLeft: \"auto\",\r\n    },\r\n}));\r\n\r\nexport const Create = () => {\r\n    const classes = styles();\r\n    const [name, setName] = useState(\"\");\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [repeatPassword, setRepeatPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n\r\n    const onRegister = () => {\r\n        if (password === repeatPassword) {\r\n            transport\r\n                .post(\"/users\", {\r\n                    name,\r\n                    username,\r\n                    email,\r\n                    password,\r\n                })\r\n                .then(() => {\r\n                    setEmail(\"\");\r\n                    setName(\"\");\r\n                    setPassword(\"\");\r\n                    setRepeatPassword(\"\")\r\n                    setUsername(\"\");\r\n                    setSuccess(true);\r\n                });\r\n        } else {\r\n            setError(\"Passwords aren't equal!\");\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Card className={classes.card} variant=\"outlined\">\r\n                <TextField label=\"Name\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                <TextField label=\"Email\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                <TextField\r\n                    type={\"password\"}\r\n                    label=\"Password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <TextField\r\n                    type={\"password\"}\r\n                    label=\"Confirm password\"\r\n                    value={repeatPassword}\r\n                    onChange={(e) => setRepeatPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onRegister}>\r\n                    Register\r\n                </Button>\r\n                <Typography className={classes.root}>\r\n                    <Link className={classes.login} to={\"/login\"}>\r\n                        Login\r\n                    </Link>\r\n                </Typography>\r\n                {success && <p className={classes.success}>Success!</p>}\r\n                {error && <p className={classes.error}>{error}</p>}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { Button, Card, TextField, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { transport } from \"../services/Transport\";\r\nimport { AxiosError } from \"axios\";\r\nimport { AppContext } from \"../app/App\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\n\r\nconst styles = makeStyles(() => ({\r\n    container: {\r\n        height: \"100vh\",\r\n        position: \"relative\",\r\n    },\r\n    card: {\r\n        padding: 20,\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        width: 600,\r\n        transform: \"translate(-50%, -50%)\",\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr\",\r\n        gridRowGap: 20,\r\n    },\r\n    register: {\r\n        textDecoration: \"none\",\r\n    },\r\n    root: {\r\n        marginLeft: \"auto\",\r\n    },\r\n    error: {\r\n        color: \"red\",\r\n    },\r\n}));\r\n\r\nexport const Login = () => {\r\n    const classes = styles();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState<string | undefined>(undefined);\r\n    const history = useHistory();\r\n    const context = useContext(AppContext);\r\n    const auth = useAuth();\r\n\r\n    const onLogin = () => {\r\n        auth.onLogin(email, password)\r\n            .then((response) => {\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                context.setAuth(true);\r\n                context.setUser(response.data.user);\r\n                localStorage.setItem(\"user\", JSON.stringify(response.data.user));\r\n            })\r\n            .catch((e: AxiosError) => {\r\n                const resp = e.response;\r\n                if (resp) {\r\n                    setError(resp.data.message);\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <Card className={classes.card} variant=\"outlined\">\r\n                <TextField\r\n                    id=\"standard-basic\"\r\n                    label=\"Email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n                <TextField\r\n                    id=\"standard-basic\"\r\n                    label=\"Password\"\r\n                    type={\"password\"}\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={onLogin}>\r\n                    Login\r\n                </Button>\r\n                <Typography className={classes.root}>\r\n                    <Link className={classes.register} to={\"/create\"}>\r\n                        Register\r\n                    </Link>\r\n                </Typography>\r\n                {error && <p className={classes.error}>{error}</p>}\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n","import React, { createContext, useEffect, useState } from \"react\"\r\nimport {Header} from \"../components/Header\";\r\nimport {transport} from \"../services/Transport\";\r\nimport { Route, Switch} from \"react-router\";\r\nimport {Main} from \"../pages/Main\";\r\nimport {Post} from \"../pages/Post\";\r\nimport {Profile} from \"../pages/Profile\";\r\nimport {Album} from \"../pages/Album\";\r\nimport {Photo} from \"../pages/Photo\";\r\nimport {CreatePost} from \"../pages/CreatePost\"\r\nimport {EditPost} from \"../pages/EditPost\"\r\nimport { Create } from \"../pages/Create\";\r\nimport { Login } from \"../pages/Login\";\r\nimport { IAppContext } from \"../entity/app\";\r\nimport { IUser } from \"../entity/user\";\r\n\r\ntransport.init(\"http://15.188.194.95:1111\");\r\n\r\nexport const AppContext = createContext<IAppContext>({\r\n    auth: false,\r\n    setAuth(value: boolean) {\r\n        return;\r\n    },\r\n    setUser(value: IUser) {\r\n        return;\r\n    }\r\n})\r\n\r\n export const App = () => {\r\n     const [auth, setAuth] = useState(false);\r\n     const [user, setUser] = useState<IUser | undefined>(undefined);\r\n\r\n     useEffect(() => {\r\n         const localUser = localStorage.getItem(\"user\");\r\n         if (localUser) {\r\n             setAuth(true);\r\n             setUser(JSON.parse(localUser));\r\n         }\r\n     }, [])\r\n\r\n    return (\r\n        <AppContext.Provider value={{auth, user, setAuth, setUser}}>\r\n            <Header />\r\n            <Switch>\r\n                <Route exact path={\"/\"} component={Main} />\r\n                <Route exact path={\"/posts/:postId\"} component={Post} />\r\n                <Route exact path={\"/users/:userId\"} component={Profile} />\r\n                <Route exact path={\"/albums/:albumId\"} component={Album} />\r\n                <Route exact path={\"/albums/:albumId/:photoId\"} component={Photo} />\r\n                <Route exact path={\"/createPost\"} component={CreatePost} />\r\n                <Route exact path={\"/editPost/:postId\"} component={EditPost} />\r\n                <Route exact path={\"/create\"} component={Create} />\r\n                <Route exact path={\"/login\"} component={Login} />\r\n            </Switch>\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}